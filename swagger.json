{
  "swagger" : "2.0",
  "info" : {
    "description" : "The Smooch API is a unified interface for powering messaging in your customer experiences across every channel. Our API speeds access to new markets, reduces time to ship, eliminates complexity, and helps you build the best experiences for your customers. For more information, visit our [official documentation](https://docs.smooch.io).",
    "version" : "1.1",
    "title" : "Smooch"
  },
  "host" : "api.smooch.io",
  "basePath" : "/v1",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "security" : [ {
    "jwt" : [ ]
  } ],
  "paths" : {
    "/appusers/{userId}" : {
      "get" : {
        "tags" : [ "AppUser" ],
        "description" : "Get the specified app user.",
        "operationId" : "getAppUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AppUser" ],
        "description" : "Update the specified app user.",
        "operationId" : "updateAppUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "appUserUpdateBody",
          "description" : "Body for an updateAppUser request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppUserUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      }
    },
    "/appusers" : {
      "post" : {
        "tags" : [ "AppUser" ],
        "description" : "Pre-create an app user.",
        "operationId" : "preCreateAppUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "appUserPreCreateBody",
          "description" : "Body for a preCreateAppUser request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppUserPreCreate"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/images" : {
      "post" : {
        "tags" : [ "AppUser" ],
        "description" : "Send an image message to the conversation.",
        "operationId" : "postImageMessage",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "source",
          "in" : "formData",
          "description" : "Image to be uploaded",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "role",
          "in" : "formData",
          "description" : "Role of the sender",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/MessageResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/profile" : {
      "delete" : {
        "tags" : [ "AppUser" ],
        "description" : "Delete specified app user's profile.",
        "operationId" : "deleteAppUserProfile",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/channels" : {
      "get" : {
        "tags" : [ "AppUser" ],
        "description" : "Get specified app user's channel entity IDs.",
        "operationId" : "getAppUserEntityIds",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AppUser" ],
        "description" : "Link specified app user to given channel.",
        "operationId" : "linkAppUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "appUserLinkBody",
          "description" : "Body for a linkAppUser request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppUserLink"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/AppUserResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/channels/{channel}" : {
      "delete" : {
        "tags" : [ "AppUser" ],
        "description" : "Unlink specified app user from given channel.",
        "operationId" : "unlinkAppUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "channel",
          "in" : "path",
          "description" : "Name of the channel.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/appusers/{userId}/devices/{deviceId}" : {
      "put" : {
        "tags" : [ "AppUser" ],
        "description" : "Update specified device information.",
        "operationId" : "appUserDeviceUpdate",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deviceId",
          "in" : "path",
          "description" : "Identifies the device.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "appUserDeviceUpdateBody",
          "description" : "Body for an updateAppUserDevice request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeviceUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DeviceResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/events" : {
      "post" : {
        "tags" : [ "AppUser" ],
        "description" : "Track an event for the given app user.",
        "operationId" : "trackEvent",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "trackEventBody",
          "description" : "Body for a trackEvent request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Event"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/TrackEventResponse"
            }
          }
        }
      }
    },
    "/appusers/{userId}/messages" : {
      "get" : {
        "tags" : [ "Conversation" ],
        "description" : "Get the specified app user's messages.",
        "operationId" : "getMessages",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Timestamp of message. The API will return 100 messages before the specified timestamp (excluding any messages with the provided timestamp).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Timestamp of message. The API will return 100 messages after the specified timestamp (excluding any messages with the provided timestamp).",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/GetMessagesResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Conversation" ],
        "description" : "Post a message to or from the app user.",
        "operationId" : "postMessage",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "messagePostBody",
          "description" : "Body for a postMessage request.\nAdditional arguments are necessary based on message type ([text](https://docs.smooch.io/rest#text-message), [image](https://docs.smooch.io/rest#image-message), [carousel](https://docs.smooch.io/rest#carousel-message), [list](https://docs.smooch.io/rest#list-message))\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessagePost"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PostMessagesResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Conversation" ],
        "description" : "Clears the message history for a user, permanently deleting all messages, but leaving any connections to Messaging Channels and Business Systems intact. These connections allow for the conversation to continue in the future, while still being associated to the same appUser.\n",
        "operationId" : "deleteMessages",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/appusers/{userId}/conversation/read" : {
      "post" : {
        "tags" : [ "Conversation" ],
        "description" : "Reset the unread count of the conversation to 0.",
        "operationId" : "resetUnreadCount",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/appusers/{userId}/conversation/activity" : {
      "post" : {
        "tags" : [ "Conversation" ],
        "description" : "Notify Smooch when an app maker starts or stops typing a response.",
        "operationId" : "triggerTypingActivity",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Identifies the user. Can be either the smoochId or the userId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "typingActivityTriggerBody",
          "description" : "Body for a triggerTypingActivity request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypingActivityTrigger"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/menu" : {
      "get" : {
        "tags" : [ "Menu" ],
        "description" : "Get the specified app’s menu.",
        "operationId" : "getMenu",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Menu" ],
        "description" : "Configure the specified app’s menu.",
        "operationId" : "updateMenu",
        "parameters" : [ {
          "in" : "body",
          "name" : "menuUpdateBody",
          "description" : "Body for a updateMenu request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Menu"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Menu" ],
        "description" : "Remove the specified app’s menu.",
        "operationId" : "deleteMenu",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      }
    },
    "/apps" : {
      "get" : {
        "tags" : [ "App" ],
        "description" : "List all apps configured.",
        "operationId" : "listApps",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of records to return.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of initial records to skip before picking records to return.",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ListAppsResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "App" ],
        "description" : "Create a new app.",
        "operationId" : "createApp",
        "parameters" : [ {
          "in" : "body",
          "name" : "appCreateBody",
          "description" : "Body for a createApp request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppCreate"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AppResponse"
            }
          }
        }
      }
    },
    "/apps/{appId}" : {
      "get" : {
        "tags" : [ "App" ],
        "description" : "Get the specified app.",
        "operationId" : "getApp",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/AppResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "App" ],
        "description" : "Delete the specified app.",
        "operationId" : "deleteApp",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/apps/{appId}/keys" : {
      "get" : {
        "tags" : [ "App" ],
        "description" : "List the secret keys for the specified app.",
        "operationId" : "listSecretKeys",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ListSecretKeysResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "App" ],
        "description" : "Create a secret key for the specified app.",
        "operationId" : "createSecretKey",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "secretKeyCreateBody",
          "description" : "Body for a createSecretKey request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SecretKeyCreate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SecretKeyResponse"
            }
          }
        }
      }
    },
    "/apps/{appId}/keys/{keyId}" : {
      "get" : {
        "tags" : [ "App" ],
        "description" : "Get the specified secret key.",
        "operationId" : "getSecretKey",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Identifies the secret key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SecretKeyResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "App" ],
        "description" : "Delete the specified secret key.",
        "operationId" : "deleteSecretKey",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Identifies the secret key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/apps/{appId}/keys/{keyId}/jwt" : {
      "get" : {
        "tags" : [ "App" ],
        "description" : "Get an app-scoped JWT for the specified secret key.",
        "operationId" : "getAppJwt",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Identifies the secret key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/JwtResponse"
            }
          }
        }
      }
    },
    "/apps/{appId}/integrations" : {
      "get" : {
        "tags" : [ "Integration" ],
        "description" : "List integrations for the specified app.",
        "operationId" : "listIntegrations",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "List of types to filter the query by.\nMore than one value can be specified through comma separation e.g. ?types=*twilio*,*line*.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ListIntegrationsResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Integration" ],
        "description" : "Create an integration for the specified app.",
        "operationId" : "createIntegration",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "integrationCreateBody",
          "description" : "Body for a createIntegration request.\nAdditional arguments are necessary based on integration type. For detailed instructions, visit our [official docs](https://docs.smooch.io/rest/#create-integration)\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IntegrationCreate"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/IntegrationResponse"
            }
          }
        }
      }
    },
    "/apps/{appId}/integrations/{integrationId}" : {
      "get" : {
        "tags" : [ "Integration" ],
        "description" : "Get the specified integration.",
        "operationId" : "getIntegration",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/IntegrationResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration" ],
        "description" : "Delete the specified integration.",
        "operationId" : "deleteIntegration",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/apps/{appId}/integrations/{integrationId}/menu" : {
      "get" : {
        "tags" : [ "Integration" ],
        "description" : "Get the specified integration's menu.",
        "operationId" : "getIntegrationMenu",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Integration" ],
        "description" : "Create the specified integration’s menu, overriding the app menu if configured.",
        "operationId" : "createIntegrationMenu",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "menuCreateBody",
          "description" : "Body for a createMenu request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Menu"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Integration" ],
        "description" : "Update the specified integration’s menu.",
        "operationId" : "updateIntegrationMenu",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "menuUpdateBody",
          "description" : "Body for a updateMenu request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Menu"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MenuResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration" ],
        "description" : "Delete the specified integration’s menu.",
        "operationId" : "deleteIntegrationMenu",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "Identifies the integration.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/apps/{appId}/webhooks" : {
      "get" : {
        "tags" : [ "Webhook" ],
        "description" : "List webhooks for the specified app.",
        "operationId" : "listWebhooks",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ListWebhooksResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Webhook" ],
        "description" : "Create a webhook for the specified app.",
        "operationId" : "createWebhook",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "webhookCreateBody",
          "description" : "Body for a createWebhook request.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WebhookCreate"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/WebhookResponse"
            }
          }
        }
      }
    },
    "/apps/{appId}/webhooks/{webhookId}" : {
      "get" : {
        "tags" : [ "Webhook" ],
        "description" : "Get the specified webhook.",
        "operationId" : "getWebhook",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "Identifies the webhook.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/WebhookResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Webhook" ],
        "description" : "Update the specified webhook.",
        "operationId" : "updateWebhook",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "Identifies the webhook.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "webhookUpdateBody",
          "description" : "Body for an updateWebhook request.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WebhookUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/WebhookResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Webhook" ],
        "description" : "Delete the specified webhook.",
        "operationId" : "deleteWebhook",
        "parameters" : [ {
          "name" : "appId",
          "in" : "path",
          "description" : "Identifies the app.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "Identifies the webhook.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/init" : {
      "post" : {
        "tags" : [ "Init" ],
        "description" : "This API is called by an iOS, Android, or browser client when the app is first loaded. It serves a number of purposes.\n1. Initializes a new *appUser* and *client* if they don’t yet exist.\n2. Updates an existing app user’s profile and client information.\n3. Authenticates the *appUser* if *jwt* credentials are provided.\n",
        "operationId" : "init",
        "parameters" : [ {
          "in" : "body",
          "name" : "initBody",
          "description" : "Body for an init request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Init"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/InitResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "jwt" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "AppUserResponse" : {
      "type" : "object",
      "required" : [ "appUser" ],
      "properties" : {
        "appUser" : {
          "description" : "The app user.",
          "$ref" : "#/definitions/AppUser"
        }
      }
    },
    "AppUser" : {
      "type" : "object",
      "required" : [ "_id", "conversationStarted", "properties" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The app user's ID, generated automatically."
        },
        "userId" : {
          "type" : "string",
          "description" : "The app user's userId.\nThis ID is specified by the appMaker.\n"
        },
        "givenName" : {
          "type" : "string",
          "description" : "The app user's given name."
        },
        "surname" : {
          "type" : "string",
          "description" : "The app user's surname."
        },
        "email" : {
          "type" : "string",
          "description" : "The app user's email."
        },
        "signedUpAt" : {
          "type" : "string",
          "description" : "A datetime string with the format *yyyy-mm-ddThh:mm:ssZ* representing the moment an appUser was created."
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the app user.",
          "properties" : { }
        },
        "conversationStarted" : {
          "type" : "boolean",
          "description" : "Flag indicating if the conversation has started for the app user."
        },
        "credentialRequired" : {
          "type" : "boolean",
          "description" : "Flag indicating if the appUser is secured by a JSON Web Token or not."
        },
        "clients" : {
          "type" : "array",
          "description" : "List of clients associated with the app user.",
          "items" : {
            "$ref" : "#/definitions/Client"
          }
        },
        "pendingClients" : {
          "type" : "array",
          "description" : "As clients, but containing linked clients which have not been confirmed yet (i.e. Twilio SMS).",
          "items" : {
            "$ref" : "#/definitions/Client"
          }
        }
      }
    },
    "Client" : {
      "type" : "object",
      "required" : [ "id", "platform" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier for the client. Must be globally unique."
        },
        "active" : {
          "type" : "boolean",
          "description" : "Flag indicating if the client is active."
        },
        "lastSeen" : {
          "type" : "string",
          "format" : "dateTime",
          "description" : "The date time the client was last seen."
        },
        "platform" : {
          "type" : "string",
          "description" : "The client's platform.",
          "enum" : [ "ios", "android", "web", "other" ]
        },
        "pushNotificationToken" : {
          "type" : "string",
          "description" : "The GCM or APN token to be used for sending push notifications to the device.\nApplies to only *android* and *ios* clients.\n"
        },
        "appVersion" : {
          "type" : "string",
          "description" : "A reserved string field for reporting the app version running on the device."
        },
        "info" : {
          "$ref" : "#/definitions/ClientInfo"
        }
      }
    },
    "ClientInfo" : {
      "type" : "object",
      "properties" : {
        "appName" : {
          "type" : "string",
          "description" : "Name of the app associated with the client."
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The client's device model."
        },
        "os" : {
          "type" : "string",
          "description" : "The client's OS."
        },
        "osVersion" : {
          "type" : "string",
          "description" : "The client's OS version."
        },
        "radioAccessTechnology" : {
          "type" : "string",
          "description" : "The client's radioAccessTechnology (Ex. HSDPA)."
        },
        "carrier" : {
          "type" : "string",
          "description" : "The client's carrier."
        },
        "devicePlatform" : {
          "type" : "string",
          "description" : "The client's device platform."
        },
        "wifi" : {
          "type" : "string",
          "description" : "Whether or not the client has wifi."
        }
      }
    },
    "AppUserUpdate" : {
      "type" : "object",
      "properties" : {
        "givenName" : {
          "type" : "string",
          "description" : "The app user's given name."
        },
        "surname" : {
          "type" : "string",
          "description" : "The app user's surname."
        },
        "email" : {
          "type" : "string",
          "description" : "The app user's email."
        },
        "signedUpAt" : {
          "type" : "string",
          "description" : "A datetime string with the format *yyyy-mm-ddThh:mm:ssZ* representing the moment an appUser was created."
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the app user.",
          "properties" : { }
        }
      }
    },
    "AppUserPreCreate" : {
      "type" : "object",
      "required" : [ "userId" ],
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "The app user's userId.\nThis ID is specified by the appMaker.\n"
        },
        "credentialRequired" : {
          "type" : "boolean",
          "description" : "Flag indicating if the appUser is secured by a JSON Web Token or not."
        },
        "givenName" : {
          "type" : "string",
          "description" : "The app user's given name."
        },
        "surname" : {
          "type" : "string",
          "description" : "The app user's surname."
        },
        "email" : {
          "type" : "string",
          "description" : "The app user's email."
        },
        "signedUpAt" : {
          "type" : "string",
          "description" : "A datetime string with the format *yyyy-mm-ddThh:mm:ssZ* representing the moment an appUser was created."
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the app user.",
          "properties" : { }
        }
      }
    },
    "MessageResponse" : {
      "type" : "object",
      "required" : [ "conversation", "message" ],
      "properties" : {
        "message" : {
          "type" : "object",
          "description" : "The message.",
          "properties" : { }
        },
        "conversation" : {
          "description" : "The conversation.",
          "$ref" : "#/definitions/Conversation"
        }
      }
    },
    "Conversation" : {
      "type" : "object",
      "required" : [ "_id", "unreadCount" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The conversation ID, generated automatically."
        },
        "unreadCount" : {
          "type" : "integer",
          "description" : "The number of unread messages in the conversation."
        }
      }
    },
    "AppUserLink" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type of the channel to link.",
          "enum" : [ "twilio" ]
        },
        "skipConfirmation" : {
          "type" : "string",
          "description" : "Flag indicating if the linking confirmation should be skipped."
        }
      }
    },
    "DeviceUpdate" : {
      "type" : "object",
      "properties" : {
        "pushNotificationToken" : {
          "type" : "string",
          "description" : "The GCM or APN token to be used for sending push notifications to the device.\nApplies to only *android* and *ios* clients.\n"
        },
        "appVersion" : {
          "type" : "string",
          "description" : "A reserved string field for reporting the app version running on the device."
        },
        "info" : {
          "$ref" : "#/definitions/ClientInfo"
        }
      }
    },
    "DeviceResponse" : {
      "type" : "object",
      "properties" : {
        "device" : {
          "description" : "The device.",
          "$ref" : "#/definitions/Client"
        }
      }
    },
    "Event" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the event."
        }
      }
    },
    "TrackEventResponse" : {
      "type" : "object",
      "properties" : {
        "conversationUpdated" : {
          "type" : "boolean",
          "description" : "Flag indicating if the conversation was updated."
        }
      }
    },
    "GetMessagesResponse" : {
      "type" : "object",
      "properties" : {
        "conversation" : {
          "description" : "The conversation.",
          "$ref" : "#/definitions/Conversation"
        },
        "messages" : {
          "type" : "array",
          "description" : "The messages.",
          "items" : {
            "$ref" : "#/definitions/Message"
          }
        },
        "next" : {
          "type" : "string",
          "description" : "The URI for the next set of messages in the conversation."
        }
      }
    },
    "Message" : {
      "type" : "object",
      "required" : [ "_id", "authorId", "avatarUrl", "name", "received", "role", "text", "type" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The message ID, generated automatically."
        },
        "authorId" : {
          "type" : "string",
          "description" : "The ID of the message's author."
        },
        "role" : {
          "type" : "string",
          "description" : "The role of the individual posting the message. Can be either *appUser* or *appMaker*."
        },
        "type" : {
          "type" : "string",
          "description" : "The message type.",
          "enum" : [ "text", "image", "carousel", "list" ]
        },
        "name" : {
          "type" : "string",
          "description" : "The display name of the message author."
        },
        "text" : {
          "type" : "string",
          "description" : "The message text.\nRequired for text messages.\n"
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the message author."
        },
        "avatarUrl" : {
          "type" : "string",
          "description" : "The URL of the desired message avatar image."
        },
        "received" : {
          "type" : "number",
          "format" : "float",
          "description" : "The unix timestamp of the moment the message was received."
        },
        "mediaUrl" : {
          "type" : "string",
          "format" : "uri",
          "description" : "The mediaUrl for the image.\nRequired for image messages.\n"
        },
        "mediaType" : {
          "type" : "string",
          "description" : "The mediaType for the image.\nRequired for image messages.\n"
        },
        "metadata" : {
          "type" : "object",
          "description" : "Flat JSON object containing any custom properties associated with the message.",
          "properties" : { }
        },
        "items" : {
          "type" : "array",
          "description" : "The items in the message list.\nRequired for carousel and list messages.\n",
          "items" : {
            "$ref" : "#/definitions/MessageItem"
          }
        },
        "actions" : {
          "type" : "array",
          "description" : "The actions in the message.",
          "items" : {
            "$ref" : "#/definitions/Action"
          }
        },
        "payload" : {
          "type" : "string",
          "description" : "The payload of a reply action, if applicable."
        },
        "displaySettings" : {
          "description" : "Settings to adjust the carousel layout. See [Display Settings](https://docs.smooch.io/rest/#display-settings).",
          "$ref" : "#/definitions/DisplaySettings"
        }
      }
    },
    "MessageItem" : {
      "required" : [ "actions", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "The title of the message item."
        },
        "description" : {
          "type" : "string",
          "description" : "The text description, or subtitle."
        },
        "mediaUrl" : {
          "type" : "string",
          "description" : "The image URL to be shown in the carousel/list item."
        },
        "size" : {
          "type" : "string",
          "description" : "The size of the image to be shown in the carousel/list item.\nOnly top item of Facebook Messenger carousel supported.\nChoose from *compact* and *large*.\n"
        },
        "mediaType" : {
          "type" : "string",
          "description" : "If a *mediaUrl* was specified, the media type is defined here, for example *image/jpeg*."
        },
        "actions" : {
          "type" : "array",
          "description" : "Array of [action buttons](https://docs.smooch.io/rest/#action-buttons). At least 1 is required, a maximum of 3 are allowed.",
          "items" : {
            "$ref" : "#/definitions/Action"
          }
        }
      }
    },
    "Action" : {
      "required" : [ "text", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The action type.",
          "enum" : [ "link", "buy", "postback", "reply", "locationRequest" ]
        },
        "text" : {
          "type" : "string",
          "description" : "The button text."
        },
        "payload" : {
          "type" : "string",
          "description" : "The payload to be sent with the resulting webhook.\nRequired for *postback* and *reply* actions.\n"
        },
        "metadata" : {
          "type" : "object",
          "description" : "Flat JSON object containing any custom properties associated with the action.",
          "properties" : { }
        },
        "amount" : {
          "type" : "integer",
          "description" : "The amount being charged. It needs to be specified in cents and is an integer.\nRequired for *buy* actions.\n"
        },
        "currency" : {
          "type" : "string",
          "description" : "The currency of the amount being charged (USD, CAD, etc.)."
        },
        "default" : {
          "type" : "boolean",
          "description" : "Flag indicating if the message action is the default for a message item in Facebook Messenger."
        },
        "iconUrl" : {
          "type" : "string",
          "description" : "An icon to render next to the reply option (Facebook Messenger and Web Messenger only)."
        },
        "uri" : {
          "type" : "string",
          "description" : "The action URI. This is the link that will be used in the clients when clicking the button.\nRequired for *link* actions.\n"
        },
        "extraChannelOptions" : {
          "type" : "object",
          "description" : "Extra options to pass directly to the channel API. See [Extra Channel Options](https://docs.smooch.io/rest#extra-channel-options-schema)",
          "properties" : { }
        }
      }
    },
    "DisplaySettings" : {
      "type" : "object",
      "properties" : {
        "imageAspectRatio" : {
          "type" : "string",
          "description" : "Specifies how to display all carousel images. Valid values are *horizontal* (default) and *square*."
        }
      }
    },
    "MessagePost" : {
      "type" : "object",
      "required" : [ "role", "type" ],
      "properties" : {
        "role" : {
          "type" : "string",
          "description" : "The role of the individual posting the message. Can be either *appUser* or *appMaker*."
        },
        "type" : {
          "type" : "string",
          "description" : "The message type.",
          "enum" : [ "text", "image", "carousel", "list" ]
        },
        "name" : {
          "type" : "string",
          "description" : "The display name of the message author."
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the message author."
        },
        "avatarUrl" : {
          "type" : "string",
          "description" : "The URL of the desired message avatar image."
        },
        "metadata" : {
          "type" : "object",
          "description" : "Flat JSON object containing any custom properties associated with the message.",
          "properties" : { }
        },
        "payload" : {
          "type" : "string",
          "description" : "The payload of a reply action, if applicable."
        },
        "text" : {
          "type" : "string",
          "description" : "The message text.\nRequired for text messages.\n"
        },
        "mediaUrl" : {
          "type" : "string",
          "format" : "uri",
          "description" : "The mediaUrl for the image.\nRequired for image messages.\n"
        },
        "mediaType" : {
          "type" : "string",
          "description" : "The mediaType for the image.\nRequired for image messages.\n"
        },
        "items" : {
          "type" : "array",
          "description" : "The items in the message list.\nRequired for carousel and list messages.\n",
          "items" : {
            "$ref" : "#/definitions/MessageItem"
          }
        },
        "actions" : {
          "type" : "array",
          "description" : "The actions in the message.",
          "items" : {
            "$ref" : "#/definitions/Action"
          }
        },
        "destination" : {
          "description" : "Specifies which channel to deliver a message to. See [list integrations](https://docs.smooch.io/rest/#list-integrations) to get integration ID and type.",
          "$ref" : "#/definitions/Destination"
        }
      }
    },
    "Destination" : {
      "required" : [ "integrationId", "integrationType" ],
      "properties" : {
        "integrationId" : {
          "type" : "string",
          "description" : "The ID of the target integration."
        },
        "integrationType" : {
          "type" : "string",
          "description" : "The type of the target integration."
        }
      }
    },
    "PostMessagesResponse" : {
      "type" : "object",
      "properties" : {
        "conversation" : {
          "description" : "The conversation.",
          "$ref" : "#/definitions/Conversation"
        },
        "messages" : {
          "type" : "array",
          "description" : "The messages.",
          "items" : {
            "$ref" : "#/definitions/Message"
          }
        }
      }
    },
    "TypingActivityTrigger" : {
      "type" : "object",
      "required" : [ "role", "type" ],
      "properties" : {
        "role" : {
          "type" : "string",
          "description" : "The role of the actor. Must be *appMaker*."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of activity to trigger. Must be either *typing:start* or *typing:stop*."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the app maker that starts or stops typing a response."
        },
        "avatarUrl" : {
          "type" : "string",
          "description" : "The avatar URL of the app maker that starts typing a response."
        }
      }
    },
    "MenuResponse" : {
      "type" : "object",
      "required" : [ "menu" ],
      "properties" : {
        "menu" : {
          "description" : "The menu.",
          "$ref" : "#/definitions/Menu"
        }
      }
    },
    "Menu" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "A list of menu items.",
          "items" : {
            "$ref" : "#/definitions/MenuItem"
          }
        }
      }
    },
    "MenuItem" : {
      "type" : "object",
      "required" : [ "text", "type" ],
      "properties" : {
        "text" : {
          "type" : "string",
          "description" : "The button text of the menu item."
        },
        "uri" : {
          "type" : "string",
          "description" : "A valid address, like http://smooch.io. Required for a *link* type item."
        },
        "type" : {
          "type" : "string",
          "description" : "Can either be [link](https://docs.smooch.io/javascript/#links) or [postback](https://docs.smooch.io/javascript/#postbacks), which correspond to Smooch’s [link and postback actions]((https://docs.smooch.io/javascript/#action-buttons)."
        },
        "payload" : {
          "type" : "string",
          "description" : "A payload for a postback. Required for a *postback* type item."
        }
      }
    },
    "ListAppsResponse" : {
      "type" : "object",
      "properties" : {
        "apps" : {
          "type" : "array",
          "description" : "The list of apps.",
          "items" : {
            "$ref" : "#/definitions/App"
          }
        },
        "hasMore" : {
          "type" : "boolean",
          "description" : "Flag indicating if there are more apps that are not present in the response."
        },
        "offset" : {
          "type" : "integer",
          "description" : "The number of app records skipped in the returned list."
        }
      }
    },
    "App" : {
      "type" : "object",
      "required" : [ "_id", "appToken", "name" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The app's ID."
        },
        "appToken" : {
          "type" : "string",
          "description" : "The appToken, used to initialize the Web, iOS and Android clients and to make calls to the app user facing API."
        },
        "name" : {
          "type" : "string",
          "description" : "The app's name."
        }
      }
    },
    "AppCreate" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The app's name."
        }
      }
    },
    "AppResponse" : {
      "type" : "object",
      "properties" : {
        "app" : {
          "description" : "The app.",
          "$ref" : "#/definitions/App"
        }
      }
    },
    "ListSecretKeysResponse" : {
      "type" : "object",
      "properties" : {
        "keys" : {
          "type" : "array",
          "description" : "The list of secret keys.",
          "items" : {
            "$ref" : "#/definitions/SecretKey"
          }
        }
      }
    },
    "SecretKey" : {
      "type" : "object",
      "required" : [ "_id", "name", "secret" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The secret key ID, generated automatically."
        },
        "secret" : {
          "type" : "string",
          "description" : "The secret itself."
        },
        "name" : {
          "type" : "string",
          "description" : "A friendly identifier for the secret key."
        }
      }
    },
    "SecretKeyCreate" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "A friendly identifier for the secret key."
        }
      }
    },
    "SecretKeyResponse" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "description" : "The secret key.",
          "$ref" : "#/definitions/SecretKey"
        }
      }
    },
    "JwtResponse" : {
      "type" : "object",
      "properties" : {
        "jwt" : {
          "type" : "string",
          "description" : "The JWT."
        }
      }
    },
    "ListIntegrationsResponse" : {
      "type" : "object",
      "properties" : {
        "integrations" : {
          "type" : "array",
          "description" : "The list of integrations.",
          "items" : {
            "$ref" : "#/definitions/Integration"
          }
        }
      }
    },
    "Integration" : {
      "type" : "object",
      "required" : [ "_id", "type" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The integration ID, generated automatically."
        },
        "type" : {
          "type" : "string",
          "description" : "The integration type."
        },
        "pageAccessToken" : {
          "type" : "string",
          "description" : "Facebook Page Access Token.\nRequired for *messenger* integrations.\n"
        },
        "appId" : {
          "type" : "string",
          "description" : "Facebook App ID OR WeChat App ID.\nRequired for *messenger* and *wechat* integrations.\n"
        },
        "appSecret" : {
          "type" : "string",
          "description" : "Facebook Page App Secret OR WeChat App Secret.\nRequired for *messenger* and *wechat* integrations.\n"
        },
        "accountSid" : {
          "type" : "string",
          "description" : "Twilio Account SID.\nRequired for *twilio* integrations.\n"
        },
        "authToken" : {
          "type" : "string",
          "description" : "Twilio Auth Token.\nRequired for *twilio* integrations.\n"
        },
        "phoneNumberSid" : {
          "type" : "string",
          "description" : "SID for specific phone number.\nRequired for *twilio* integrations.\n"
        },
        "token" : {
          "type" : "string",
          "description" : "Telegram Bot Token OR Viber Public Account token.\nRequired for *twilio* and *viber* integrations.\n"
        },
        "channelAccessToken" : {
          "type" : "string",
          "description" : "LINE Channel Access Token.\nRequired for *line* integrations.\n"
        },
        "encodingAesKey" : {
          "type" : "string",
          "description" : "AES Encoding Key.\n(Optional) Used for *wechat* integrations.\n"
        },
        "fromAddress" : {
          "type" : "string",
          "description" : "Email will display as coming from this address.\n(Optional) Used for *frontendEmail* integrations.\n"
        },
        "certificate" : {
          "type" : "string",
          "description" : "The binary of your APN certificate base64 encoded.\nRequired for *apn* integrations.\n"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for your APN certificate.\n(Optional) Used for *apn* integrations.\n"
        },
        "autoUpdateBadge" : {
          "type" : "boolean",
          "description" : "Use the unread count of the conversation as the application badge.\n(Optional) Used for *apn* integrations.\n"
        },
        "serverKey" : {
          "type" : "string",
          "description" : "Your server key from the fcm console.\nRequired for *fcm* integrations.\n"
        },
        "senderId" : {
          "type" : "string",
          "description" : "Your sender id from the fcm console.\nRequired for *fcm* integrations.\n"
        }
      }
    },
    "IntegrationCreate" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The integration type."
        },
        "pageAccessToken" : {
          "type" : "string",
          "description" : "Facebook Page Access Token.\nRequired for *messenger* integrations.\n"
        },
        "appId" : {
          "type" : "string",
          "description" : "Facebook App ID OR WeChat App ID.\nRequired for *messenger* and *wechat* integrations.\n"
        },
        "appSecret" : {
          "type" : "string",
          "description" : "Facebook Page App Secret OR WeChat App Secret.\nRequired for *messenger* and *wechat* integrations.\n"
        },
        "accountSid" : {
          "type" : "string",
          "description" : "Twilio Account SID.\nRequired for *twilio* integrations.\n"
        },
        "authToken" : {
          "type" : "string",
          "description" : "Twilio Auth Token.\nRequired for *twilio* integrations.\n"
        },
        "phoneNumberSid" : {
          "type" : "string",
          "description" : "SID for specific phone number.\nRequired for *twilio* integrations.\n"
        },
        "token" : {
          "type" : "string",
          "description" : "Telegram Bot Token OR Viber Public Account token.\nRequired for *twilio* and *viber* integrations.\n"
        },
        "channelAccessToken" : {
          "type" : "string",
          "description" : "LINE Channel Access Token.\nRequired for *line* integrations.\n"
        },
        "encodingAesKey" : {
          "type" : "string",
          "description" : "AES Encoding Key.\n(Optional) Used for *wechat* integrations.\n"
        },
        "fromAddress" : {
          "type" : "string",
          "description" : "Email will display as coming from this address.\n(Optional) Used for *frontendEmail* integrations.\n"
        },
        "certificate" : {
          "type" : "string",
          "description" : "The binary of your APN certificate base64 encoded.\nRequired for *apn* integrations.\n"
        },
        "password" : {
          "type" : "string",
          "description" : "The password for your APN certificate.\n(Optional) Used for *apn* integrations.\n"
        },
        "autoUpdateBadge" : {
          "type" : "boolean",
          "description" : "Use the unread count of the conversation as the application badge.\n(Optional) Used for *apn* integrations.\n"
        },
        "serverKey" : {
          "type" : "string",
          "description" : "Your server key from the fcm console.\nRequired for *fcm* integrations.\n"
        },
        "senderId" : {
          "type" : "string",
          "description" : "Your sender id from the fcm console.\nRequired for *fcm* integrations.\n"
        }
      }
    },
    "IntegrationResponse" : {
      "type" : "object",
      "properties" : {
        "integration" : {
          "description" : "The integration.",
          "$ref" : "#/definitions/Integration"
        }
      }
    },
    "ListWebhooksResponse" : {
      "type" : "object",
      "required" : [ "webhooks" ],
      "properties" : {
        "webhooks" : {
          "type" : "array",
          "description" : "The list of webhooks.",
          "items" : {
            "$ref" : "#/definitions/Webhook"
          }
        }
      }
    },
    "Webhook" : {
      "type" : "object",
      "required" : [ "_id", "secret", "target", "triggers" ],
      "properties" : {
        "_id" : {
          "type" : "string",
          "description" : "The webhook ID, generated automatically."
        },
        "target" : {
          "type" : "string",
          "description" : "URL to be called when the webhook is triggered."
        },
        "triggers" : {
          "type" : "array",
          "description" : "An array of triggers you wish to have the webhook listen to. If unspecified the default trigger is *message*.",
          "items" : {
            "type" : "string",
            "enum" : [ "message", "message:appUser", "message:appMaker", "conversation:start", "conversation:read", "postback", "merge:appUser", "delivery:success", "delivery:failure", "payment:success", "*" ]
          }
        },
        "secret" : {
          "type" : "string",
          "description" : "Secret which will be transmitted with each webhook invocation and can be used to verify the authenticity of the caller."
        }
      }
    },
    "WebhookCreate" : {
      "type" : "object",
      "required" : [ "target" ],
      "properties" : {
        "target" : {
          "type" : "string",
          "description" : "URL to be called when the webhook is triggered."
        },
        "triggers" : {
          "type" : "array",
          "description" : "An array of triggers you wish to have the webhook listen to. If unspecified the default trigger is *message*.",
          "items" : {
            "type" : "string",
            "enum" : [ "message", "message:appUser", "message:appMaker", "conversation:start", "conversation:read", "postback", "merge:appUser", "delivery:success", "delivery:failure", "payment:success", "*" ]
          }
        }
      }
    },
    "WebhookResponse" : {
      "type" : "object",
      "required" : [ "webhook" ],
      "properties" : {
        "webhook" : {
          "description" : "The webhook.",
          "$ref" : "#/definitions/Webhook"
        }
      }
    },
    "WebhookUpdate" : {
      "type" : "object",
      "properties" : {
        "target" : {
          "type" : "string",
          "description" : "URL to be called when the webhook is triggered."
        },
        "triggers" : {
          "type" : "array",
          "description" : "An array of triggers you wish to have the webhook listen to. If unspecified the default trigger is *message*.",
          "items" : {
            "type" : "string",
            "enum" : [ "message", "message:appUser", "message:appMaker", "conversation:start", "conversation:read", "postback", "merge:appUser", "delivery:success", "delivery:failure", "payment:success", "*" ]
          }
        }
      }
    },
    "Init" : {
      "type" : "object",
      "required" : [ "device" ],
      "properties" : {
        "device" : {
          "$ref" : "#/definitions/DeviceInit"
        },
        "userId" : {
          "type" : "string",
          "description" : "The app user's userId.\nIf specified, this ID can be used to invoke APIs.\nIf left blank, an ID will automatically be generated.\n"
        }
      }
    },
    "DeviceInit" : {
      "type" : "object",
      "required" : [ "id", "platform" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier for the client. Must be globally unique."
        },
        "platform" : {
          "type" : "string",
          "description" : "The client's platform.",
          "enum" : [ "ios", "android", "web", "other" ]
        },
        "pushNotificationToken" : {
          "type" : "string",
          "description" : "The GCM or APN token to be used for sending push notifications to the device.\nApplies to only *android* and *ios* clients.\n"
        },
        "appVersion" : {
          "type" : "string",
          "description" : "A reserved string field for reporting the app version running on the device."
        },
        "info" : {
          "$ref" : "#/definitions/ClientInfo"
        }
      }
    },
    "InitResponse" : {
      "type" : "object",
      "required" : [ "app", "appUser" ],
      "properties" : {
        "appUser" : {
          "description" : "The app user.",
          "$ref" : "#/definitions/AppUser"
        },
        "app" : {
          "description" : "The app.",
          "$ref" : "#/definitions/App"
        }
      }
    }
  }
}